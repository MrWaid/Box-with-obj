struct IGraph 
{
	virtual ~IGraph() {}

	// ���������� ����� �� from � to.
	virtual void AddEdge(int from, int to) = 0;

	virtual int VerticesCount() const = 0;

	virtual void GetNextVertices(int vertex, std::vector<int>& vertices) const = 0;
	virtual void GetPrevVertices(int vertex, std::vector<int>& vertices) const = 0;
};

class ListGraph : public IGraph
{
public:

	ListGraph(int count);
	ListGraph(const IGraph& graph);
	virtual ~ListGraph();

	virtual void AddEdge(int from, int to);

	virtual int VerticesCount() const;

	virtual void GetNextVertices(int vertex, std::vector<int>& vertices) const;
	virtual void GetPrevVertices(int vertex, std::vector<int>& vertices) const;

	void Print();

private:

	std::vector<std::vector<int>> adjacencyLists;
};

ListGraph::ListGraph(int count)
{
	adjacencyLists.resize(count);
}

ListGraph::ListGraph(const IGraph& graph)
{
	adjacencyLists.resize(graph.VerticesCount());
	
	for (int i = 0; i < adjacencyLists.size(); ++i)
	{
		graph.GetNextVertices(i, adjacencyLists[i]);
	}
}

ListGraph::~ListGraph()
{
}

void ListGraph::AddEdge(int from, int to)
{
	adjacencyLists[from].push_back(to);
}

int ListGraph::VerticesCount() const
{
	return adjacencyLists.size();
}

void ListGraph::GetNextVertices(int vertex, std::vector<int>& vertices) const
{
	vertices = adjacencyLists[vertex];
}

void ListGraph::GetPrevVertices(int vertex, std::vector<int>& vertices) const
{
	vertices.clear();

	for (int from = 0; from < adjacencyLists.size(); from++)
		for (int i = 0; i < adjacencyLists[from].size(); i++)
			if (adjacencyLists[from][i] == vertex)
				vertices.push_back(from);
}

void ListGraph::Print()
{
	std::vector<int> tmp;

	for (int i = 0; i < adjacencyLists.size(); ++i)
	{
		std::cout << i << " : ";
		GetNextVertices(i, tmp);
		for (int j = 0; j < tmp.size(); ++j)
			std::cout << tmp[j] << " ";
		std::cout << std::endl;
	}
}
